{"ast":null,"code":"var _jsxFileName = \"/Users/christianznidarsic/Desktop/ReservoirApp/reservoir-app/src/components/ReservoirData.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReservoirData(props) {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sampleFreq, setSampleFreq] = useState('M');\n  const options = [{\n    value: '6 months',\n    label: '6 months'\n  }, {\n    value: '1 year',\n    label: '1 year'\n  }, {\n    value: '2 years',\n    label: '2 years'\n  }];\n  const customStyles = {\n    control: provided => ({\n      ...provided,\n      fontSize: '16px',\n      // Adjust the text size as needed\n      height: '20px',\n      // Adjust the height as needed\n      width: '150px'\n    })\n  };\n  function formatDateString(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    });\n  }\n  const formattedData = data.map(item => ({\n    stationId: item.stationId,\n    value: item.value,\n    date: formatDateString(item.date)\n  }));\n  useEffect(() => {\n    const url = `/dynamicapp/req/JSONDataServlet?Stations=${props.id}&SensorNums=15&dur_code=${sampleFreq}&Start=2020-07-24&End=2023-08-24`;\n    axios.get(url).then(response => {\n      let newData = response.data.map(item => ({\n        stationId: item.stationId,\n        value: item.value,\n        date: formatDateString(item.date)\n      }));\n      //need to remove last element of data if data is monthly, since the API returns 0 for value of current month\n      if (sampleFreq == 'M') {\n        newData.pop();\n      }\n      setData(newData);\n      setLoading(false);\n    }).catch(error => {\n      console.log(error);\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  const renderLineChart = /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 650,\n    height: 400,\n    data: formattedData,\n    margin: {\n      top: 20,\n      right: 20,\n      left: 50,\n      bottom: 30\n    },\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"value\",\n      stroke: \"#8884d8\",\n      isAnimationActive: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n      stroke: \"#ccc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      label: {\n        dy: 25,\n        fontSize: 20\n      },\n      dataKey: \"date\",\n      interval: 5,\n      tick: {\n        fontSize: 12\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n      label: {\n        value: \"Current Storage (AF)\",\n        dx: -60,\n        angle: -90,\n        fontSize: 20\n      },\n      tick: {\n        fontSize: 12\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReservoirCard\",\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [props.name, renderLineChart, /*#__PURE__*/_jsxDEV(Select, {\n        options: options,\n        styles: customStyles,\n        fontSize: \"12\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(ReservoirData, \"Jm5LvcLzY/lNj3YxmqL0vSYjVew=\");\n_c = ReservoirData;\nexport default ReservoirData;\nvar _c;\n$RefreshReg$(_c, \"ReservoirData\");","map":{"version":3,"names":["axios","React","useState","useEffect","LineChart","Line","CartesianGrid","XAxis","YAxis","Select","jsxDEV","_jsxDEV","ReservoirData","props","_s","data","setData","loading","setLoading","error","setError","sampleFreq","setSampleFreq","options","value","label","customStyles","control","provided","fontSize","height","width","formatDateString","dateString","date","Date","toLocaleDateString","year","month","day","formattedData","map","item","stationId","url","id","get","then","response","newData","pop","catch","console","log","renderLineChart","margin","top","right","left","bottom","children","type","dataKey","stroke","isAnimationActive","fileName","_jsxFileName","lineNumber","columnNumber","dy","interval","tick","dx","angle","message","className","name","styles","_c","$RefreshReg$"],"sources":["/Users/christianznidarsic/Desktop/ReservoirApp/reservoir-app/src/components/ReservoirData.js"],"sourcesContent":["import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\nimport Select from 'react-select';\n\nfunction ReservoirData(props) {\n\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [sampleFreq, setSampleFreq] = useState('M');\n\n    const options = [\n        { value: '6 months', label: '6 months' },\n        { value: '1 year', label: '1 year' },\n        { value: '2 years', label: '2 years' }\n    ]\n\n    const customStyles = {\n        control: (provided) => ({\n            ...provided,\n            fontSize: '16px', // Adjust the text size as needed\n            height: '20px',  // Adjust the height as needed\n            width: '150px'\n        }),\n    };\n\n    function formatDateString(dateString) {\n        const date = new Date(dateString)\n        return date.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n        })\n    }\n\n    const formattedData = data.map(item => ({\n        stationId: item.stationId,\n        value: item.value,\n        date: formatDateString(item.date)\n    }))\n\n    useEffect(() => {\n        const url = `/dynamicapp/req/JSONDataServlet?Stations=${props.id}&SensorNums=15&dur_code=${sampleFreq}&Start=2020-07-24&End=2023-08-24`;\n        axios.get(url)\n            .then(response => {\n                let newData = response.data.map(item => ({\n                    stationId: item.stationId,\n                    value: item.value,\n                    date: formatDateString(item.date)\n                }));\n                //need to remove last element of data if data is monthly, since the API returns 0 for value of current month\n                if (sampleFreq == 'M') {\n                    newData.pop();\n                }\n                setData(newData);\n                setLoading(false);\n            })\n            .catch(error => {\n                console.log(error)\n                setError(error);\n                setLoading(false);\n            })\n    }, [])\n\n    const renderLineChart = (\n        <LineChart width={650} height={400} data={formattedData} margin={{ top: 20, right: 20, left: 50, bottom: 30 }}>\n            <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" isAnimationActive={true} />\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis label={{ dy: 25, fontSize: 20 }} dataKey=\"date\" interval={5} tick={{ fontSize: 12 }} />\n            <YAxis label={{ value: \"Current Storage (AF)\", dx: -60, angle: -90, fontSize: 20 }} tick={{ fontSize: 12 }} />\n        </LineChart>\n    );\n\n\n    if (loading) {\n        return <div>\n            <h1>\n                Loading...\n            </h1>\n        </div>;\n    }\n\n    if (error) {\n        return <p>Error: {error.message}</p>;\n    }\n\n    return (\n        <div className=\"ReservoirCard\">\n            <h3>\n                {props.name}\n                {renderLineChart}\n                <Select options={options} styles={customStyles} fontSize='12' />\n            </h3>\n        </div>\n    )\n}\n\nexport default ReservoirData;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}