[{"/Users/christianznidarsic/Desktop/reservoir-app/src/index.js":"1","/Users/christianznidarsic/Desktop/reservoir-app/src/reportWebVitals.js":"2","/Users/christianznidarsic/Desktop/reservoir-app/src/App.js":"3","/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirData.js":"4","/Users/christianznidarsic/Desktop/reservoir-app/src/constants/reservoirIDs.js":"5","/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirPage.js":"6","/Users/christianznidarsic/Desktop/reservoir-app/src/components/Homepage.js":"7","/Users/christianznidarsic/Desktop/reservoir-app/src/components/HomePage.js":"8","/Users/christianznidarsic/Desktop/reservoir-app/src/components/_Sidebar.js":"9","/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirDataMulti.js":"10","/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirDataToday.js":"11","/Users/christianznidarsic/Desktop/reservoir-app/src/components/CaliforniaMap.js":"12","/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirSummaryText.js":"13"},{"size":628,"mtime":1699296501565,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1692906125317,"results":"16","hashOfConfig":"15"},{"size":1597,"mtime":1711746440048,"results":"17","hashOfConfig":"15"},{"size":4895,"mtime":1711491817675,"results":"18","hashOfConfig":"15"},{"size":42069,"mtime":1711738336299,"results":"19","hashOfConfig":"15"},{"size":4462,"mtime":1712342611382,"results":"20","hashOfConfig":"15"},{"size":844,"mtime":1711739871217,"results":"21","hashOfConfig":"15"},{"size":165,"mtime":1697916354325,"results":"22","hashOfConfig":"15"},{"size":827,"mtime":1710977811856,"results":"23","hashOfConfig":"15"},{"size":6552,"mtime":1712342620703,"results":"24","hashOfConfig":"15"},{"size":5915,"mtime":1711573975490,"results":"25","hashOfConfig":"15"},{"size":1182,"mtime":1711652434742,"results":"26","hashOfConfig":"15"},{"size":437,"mtime":1711736679692,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"awcfh1",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/christianznidarsic/Desktop/reservoir-app/src/index.js",[],[],"/Users/christianznidarsic/Desktop/reservoir-app/src/reportWebVitals.js",[],[],"/Users/christianznidarsic/Desktop/reservoir-app/src/App.js",[],[],"/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirData.js",[],[],"/Users/christianznidarsic/Desktop/reservoir-app/src/constants/reservoirIDs.js",[],[],"/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirPage.js",[],[],"/Users/christianznidarsic/Desktop/reservoir-app/src/components/Homepage.js",["70"],[],"import React from 'react';\nimport ReservoirDataMulti from './ReservoirDataMulti'\nimport reservoirIDs from '../constants/reservoirIDs';\nimport CaliforniaMap from './CaliforniaMap';\n\nfunction Homepage() {\n    let mapWidth = 650;\n\n    return (\n        <div className=\"ReservoirPageHome\">\n            <h1 className=\"TitleOfPage\">\n                Major Reservoirs Summary\n            </h1>\n            <ReservoirDataMulti />\n            <p className=\"DataFootnote\">\n                {/* *Historical data is averaged from 1988 to present <br></br> */}\n                Data courtesy of cdec.water.ca.gov\n            </p>\n            <h3 className=\"TitleOfChart\">\n                Reservoir Map\n            </h3>\n            <CaliforniaMap resIds={reservoirIDs} mapContainerClass={`MapContainerMulti`} />\n        </div>\n    );\n}\n\nexport default Homepage;","/Users/christianznidarsic/Desktop/reservoir-app/src/components/HomePage.js",[],[],"/Users/christianznidarsic/Desktop/reservoir-app/src/components/_Sidebar.js",[],[],"/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirDataMulti.js",["71"],[],"import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { ComposedChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\nimport Select from 'react-select';\nimport reservoirIDs from '../constants/reservoirIDs';\n\nfunction ReservoirDataMulti() {\n\n    const [data, setData] = useState([]);\n    const [areas, setAreas] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [chartRange, setChartRange] = useState('5 years');\n\n    const totalCapacity = reservoirIDs.reduce((total, reservoir) => {\n        return total + reservoir.capacity;\n    }, 0);\n\n    const options = [\n        // { value: '6 months', label: '6 months' },\n        { value: '1 year', label: '1 year' },\n        { value: '5 years', label: '5 years' },\n        { value: 'Max', label: 'Max' },\n    ]\n\n    const customStyles = {\n        control: (provided) => ({\n            ...provided,\n            fontSize: '16px', // Adjust the text size as needed\n            height: '20px',  // Adjust the height as needed\n            width: '150px'\n        }),\n        menu: (provided) => ({\n            ...provided,\n            fontSize: '16px',\n            width: '150px',\n        })\n    };\n\n\n    function updateRange(newRange) {\n        setChartRange(newRange.value);\n    }\n\n    useEffect(() => {\n        // Sort the reservoirs by capacity in ascending order and create a string of comma separated IDs\n        const sortedReservoirs = reservoirIDs.sort((a, b) => a.capacity - b.capacity);\n        const idArray = sortedReservoirs.map(reservoir => reservoir.id);\n        const idString = idArray.join(',');\n\n        const url = `https://www.reservoirapi.christianznidarsic.com/resdata/monthly?stationid=${idString}&span=34`\n        // const url = `http://localhost:3000/resdata/monthly?stationid=${idString}&span=2`\n\n        axios.get(url)\n            .then(response => {\n                setData(response.data);\n                setAreas(sortedReservoirs.map((res) => {\n                    return (\n                        <Area key={res.id} name={res.name} type=\"linear\" dot={false} dataKey={res.id} stackId={1} stroke=\"#00008b\" isAnimationActive={true} legendType=\"none\" />\n                    )\n                }\n                ));\n\n                setLoading(false);\n            })\n            .catch(error => {\n                // console.log(error)\n                setError(error);\n                setLoading(false);\n            })\n\n    }, [])\n\n    // const renderLineChart = (\n    //     <ResponsiveContainer width=\"100%\" height=\"100%\" >\n    //         <ComposedChart className=\"line-chart\" data={(chartRange === '1 year' ? data.slice(data.length - 12, data.length) : chartRange === '5 years' ? data.slice(data.length - 60, data.length) : data.slice(0, data.length))} margin={{ top: 0, right: window.innerWidth < 868 ? 20 : 40, left: window.innerWidth < 868 ? 10 : 50, bottom: 20 }}>\n    //             <CartesianGrid stroke=\"#ccc\" />\n    //             {/* <Legend verticalAlign=\"top\" layout=\"horizontal\" align=\"right\" height=\"6%\" wrapperStyle={{ fontSize: window.innerWidth < 868 ? \"8px\" : \"16px\" }} iconSize={window.innerWidth < 868 ? 8 : 16} /> */}\n    //             <Tooltip wrapperStyle={{ fontSize: window.innerWidth < 868 ? \"10px\" : \"16px\" }} />\n    //             <Area type=\"linear\" dot={false} dataKey=\"totalAverage\" stroke=\"#008080\" fill=\"#008080\" opacity=\"70%\" isAnimationActive={true} name=\"Historical Average\" />\n    //             {areas}\n    //             <XAxis dataKey=\"date\" interval={(chartRange === '1 year' ? 0 : chartRange === '5 years' ? 2 : 11)} tick={{ fontSize: window.innerWidth < 868 ? 8 : 12, angle: window.innerWidth < 868 ? -90 : -20, dy: window.innerWidth < 868 ? 16 : 8 }} />\n    //             <YAxis label={{ value: \"Storage (Acre Feet)\", angle: -90, dx: window.innerWidth < 868 ? -28 : -50, fontSize: window.innerWidth < 868 ? 12 : 20 }} tickCount={10} tick={{ fontSize: window.innerWidth < 868 ? 8 : 12 }} domain={[0, Math.floor(1.05 * totalCapacity)]} />\n    //             <ReferenceLine y={totalCapacity} stroke=\"red\" label={{ value: `Capacity: ${totalCapacity.toLocaleString()} AF`, position: \"insideLeft\", dy: 10, fontSize: window.innerWidth < 868 ? 8 : 16 }} />\n    //         </ComposedChart >\n    //     </ResponsiveContainer >\n    // );\n\n    const renderLineChart = (\n        <ResponsiveContainer width=\"100%\" height=\"100%\" >\n            <ComposedChart className=\"line-chart\" data={(chartRange === '1 year' ? data.slice(data.length - 12, data.length) : chartRange === '5 years' ? data.slice(data.length - 60, data.length) : data.slice(0, data.length))} margin={{ top: 0, right: 40, left: 50, bottom: 32 }}>\n                <CartesianGrid stroke=\"#ccc\" />\n                {/* <Legend verticalAlign=\"top\" layout=\"horizontal\" align=\"right\" height=\"6%\" wrapperStyle={{ fontSize: window.innerWidth < 868 ? \"8px\" : \"16px\" }} iconSize={window.innerWidth < 868 ? 8 : 16} /> */}\n                <Tooltip wrapperStyle={{ fontSize: \"16px\" }} />\n                <Area type=\"linear\" dot={false} dataKey=\"totalAverage\" stroke=\"#008080\" fill=\"#008080\" opacity=\"70%\" isAnimationActive={true} name=\"Historical Average\" />\n                {areas}\n                <XAxis dataKey=\"date\" interval={(chartRange === '1 year' ? 0 : chartRange === '5 years' ? 2 : 11)} tick={{ fontSize: 12, angle: -90, dy: 28 }} />\n                <YAxis label={{ value: \"Storage (Acre Feet)\", angle: -90, dx: -50, fontSize: 20 }} tickCount={10} tick={{ fontSize: 12 }} domain={[0, Math.floor(1.05 * totalCapacity)]} />\n                <ReferenceLine y={totalCapacity} stroke=\"red\" label={{ value: `Capacity: ${totalCapacity.toLocaleString()} AF`, position: \"insideLeft\", dy: 10, fontSize: 16 }} />\n            </ComposedChart >\n        </ResponsiveContainer >\n    );\n\n\n    if (loading) {\n        return <div>\n            <h1>\n                Loading chart...\n            </h1>\n        </div>;\n    }\n\n    if (error) {\n        return <p>Error: {error.message}</p>;\n    }\n\n    return (\n        <div className=\"ReservoirChartMulti\">\n            <h3 className=\"TitleOfChart\">\n                Storage History\n            </h3>\n            {renderLineChart}\n            <div className=\"ReservoirChartBottom\" >\n                <Select options={options} styles={customStyles} fontSize='12' isSearchable={false} defaultValue={options[1]} onChange={updateRange} />\n            </div>\n        </div>\n    )\n}\n\nexport default ReservoirDataMulti;","/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirDataToday.js",["72","73"],[],"import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceLine } from 'recharts';\nimport CaliforniaMap from './CaliforniaMap';\n\nfunction ReservoirDataToday(props) {\n    let mapWidth = 300;\n\n    const storagePercentage = props.data[0].value / props.capacity;\n    let storagePercentageColor = 'blue';\n    if (storagePercentage > 0.75) {\n        storagePercentageColor = 'limegreen'\n    } else if (storagePercentage > 0.50) {\n        storagePercentageColor = 'blue'\n    } else if (storagePercentage > 0.25) {\n        storagePercentageColor = 'gold'\n    } else if (storagePercentage > 0) {\n        storagePercentageColor = 'red'\n    }\n    const storageAvgPercentage = props.data[0].value / props.monthAverage.average;\n    let storageAvgPercentageColor = 'blue';\n    if (storageAvgPercentage > 1) {\n        storageAvgPercentageColor = 'limegreen'\n    } else if (storageAvgPercentage > 0.75) {\n        storageAvgPercentageColor = 'blue'\n    } else if (storageAvgPercentage > 0.50) {\n        storageAvgPercentageColor = 'gold'\n    } else if (storageAvgPercentage > 0) {\n        storageAvgPercentageColor = 'red'\n    }\n\n    // function to get the name of the month from a string in the format \"MM/DD/YYYY\"\n    function getMonthName(dateString) {\n        const dateParts = dateString.split(\"/\");\n        const month = parseInt(dateParts[0]);\n        const day = parseInt(dateParts[1]);\n        const year = parseInt(dateParts[2]);\n        // months are zero based so must offset\n        const date = new Date(year, month - 1, day);\n\n        const monthNames = [\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n        ];\n\n        const monthName = monthNames[date.getMonth()];\n\n        return monthName;\n    }\n\n    // const renderLineChart = (\n    //     < ResponsiveContainer width=\"100%\" height=\"100%\" >\n    //         <BarChart width={500} height={300} data={props.data} margin={{ top: 20, right: window.innerWidth < 868 ? 20 : 40, left: window.innerWidth < 868 ? 0 : 30, bottom: window.innerWidth < 868 ? 0 : 5, }}>\n    //             <CartesianGrid strokeDasharray=\"3 3\" />\n    //             <XAxis dataKey=\"date\" tick={{ fontSize: window.innerWidth < 868 ? 8 : 12 }} />\n    //             <YAxis tickCount={6} tick={{ fontSize: window.innerWidth < 868 ? 8 : 12 }} domain={[0, props.capacity]} />\n    //             <Tooltip wrapperStyle={{ fontSize: window.innerWidth < 868 ? \"10px\" : \"16px\" }} />\n    //             <Bar dataKey=\"value\" stackId=\"a\" fill=\"#6879D0\" background={{ fill: '#bbbbbb' }} name='Current Storage (AF)' />\n    //             <ReferenceLine y={props.monthAverage.average} stroke=\"red\" label={{ value: `Avg: ${props.monthAverage.average.toLocaleString()} AF`, fill: \"black\", position: \"inside\", dy: window.innerWidth < 868 ? 6 : 10, fontSize: window.innerWidth < 868 ? 6 : 12 }} className=\"ReferenceFont\" />\n    //         </BarChart>\n    //     </ResponsiveContainer >\n    // );\n\n    const renderLineChart = (\n        < ResponsiveContainer width=\"100%\" height=\"100%\" >\n            <BarChart width={500} height={300} data={props.data} margin={{ top: 20, right: 20, left: 30, bottom: 5, }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" tick={{ fontSize: 12 }} />\n                <YAxis tickCount={6} tick={{ fontSize: 12 }} domain={[0, props.capacity]} />\n                <Tooltip wrapperStyle={{ fontSize: \"16px\" }} />\n                <Bar dataKey=\"value\" stackId=\"a\" fill=\"#6879D0\" background={{ fill: '#bbbbbb' }} name='Current Storage (AF)' />\n                <ReferenceLine y={props.monthAverage.average} stroke=\"red\" label={{ value: `Avg: ${props.monthAverage.average.toLocaleString()} AF`, fill: \"black\", position: \"inside\", dy: 10, fontSize: 12 }} className=\"ReferenceFont\" />\n            </BarChart>\n        </ResponsiveContainer >\n    );\n\n    return (\n        <div className=\"ReservoirChartDaily\">\n\n            <div className=\"ReservoirChartDailyHeader\">\n                <h3 className=\"TitleOfChart\">\n                    Current Storage\n                </h3>\n            </div>\n\n            <div className=\"ReservoirChartDailyContent\">\n                <div className=\"ReservoirChartDailyContentChart\">\n                    {renderLineChart}\n                </div>\n                <div className=\"ReservoirChartDailyContentInfo\">\n                    <div className='ReservoirChartDailyContentInfoText'>\n                        Data as of midnight {props.data[0].date}\n                    </div>\n                    <div className='ReservoirChartDailyContentInfoText' style={{ color: storageAvgPercentageColor }}>\n                        {(storageAvgPercentage).toLocaleString(undefined, { style: 'percent' })} of average.\n                    </div>\n                    <div className='ReservoirChartDailyContentInfoText' style={{ color: storagePercentageColor }}>\n                        {(storagePercentage).toLocaleString(undefined, { style: 'percent' })} of total capacity.\n                    </div>\n                    <div className='ReservoirChartDailyContentInfoText'>\n                        Current Storage: {props.data[0].value.toLocaleString()} AF\n                    </div>\n                    <div className='ReservoirChartDailyContentInfoText'>\n                        Avg. Storage for {getMonthName(props.monthAverage.date)}: {props.monthAverage.average.toLocaleString()} AF\n                    </div>\n                    <div className='ReservoirChartDailyContentInfoText'>\n                        Total Capacity: {props.capacity.toLocaleString()} AF\n                    </div>\n                </div>\n                {/* <CaliforniaMap resIds={[props.res]} width={mapWidth} height={mapWidth * (2299 / 2000)} /> */}\n            </div>\n        </div>\n    )\n}\n\nexport default ReservoirDataToday;","/Users/christianznidarsic/Desktop/reservoir-app/src/components/CaliforniaMap.js",[],[],"/Users/christianznidarsic/Desktop/reservoir-app/src/components/ReservoirSummaryText.js",[],[],{"ruleId":"74","severity":1,"message":"75","line":7,"column":9,"nodeType":"76","messageId":"77","endLine":7,"endColumn":17},{"ruleId":"74","severity":1,"message":"78","line":3,"column":69,"nodeType":"76","messageId":"77","endLine":3,"endColumn":75},{"ruleId":"74","severity":1,"message":"79","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":21},{"ruleId":"74","severity":1,"message":"75","line":5,"column":9,"nodeType":"76","messageId":"77","endLine":5,"endColumn":17},"no-unused-vars","'mapWidth' is assigned a value but never used.","Identifier","unusedVar","'Legend' is defined but never used.","'CaliforniaMap' is defined but never used."]